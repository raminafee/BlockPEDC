// SPDX-License-Identifier: MIT
pragma solidity ^0.5.7;
pragma experimental ABIEncoderV2;  // تمكين ABI Encoder V2

contract UniversityRegistry {

    
    struct University {
        string name;
        uint256 uniqueID;  
    }

    
    mapping(uint256 => University) public universities;

    
    uint256[] public universityIDs;

    
    event UniversityAdded(string name, uint256 indexed uniqueID);

    
    function addUniversity(string memory name, uint256 uniqueID) public {
        
        require(universities[uniqueID].uniqueID == 0, "The same Unique");

        
        universities[uniqueID] = University(name, uniqueID);

       
        universityIDs.push(uniqueID);

        
        emit UniversityAdded(name, uniqueID);
    }

    
    function getAllUniversities() public view returns (University[] memory) {
        University[] memory allUniversities = new University[](universityIDs.length);
        for (uint i = 0; i < universityIDs.length; i++) {
            allUniversities[i] = universities[universityIDs[i]];
        }
        return allUniversities;
    }

    
    function getUniversityDetails(uint256 uniqueID) public view returns (string memory name, uint256 id) {
        University memory uni = universities[uniqueID];
        return (uni.name, uni.uniqueID);
    }
}
