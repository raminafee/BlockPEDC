// SPDX-License-Identifier: MIT
pragma solidity ^0.5.7;
pragma experimental ABIEncoderV2;  // تمكين ABI Encoder V2

contract StudentData {

    struct Student {
        uint256 id; // رقم الهوية
        string name; // الاسم
        string college; // الكلية
        string major; // التخصص
        string gender; // الجنس
        uint256 studentNumber; // الرقم الجامعي
        uint256 gpa; // المعدل
        uint256 universityId; // رقم الجامعة
        string universityName; // اسم الجامعة
        string code; // الكود المولد
    }

    
    mapping(uint256 => Student[]) public studentsByUniversity; // مصفوفة حسب رقم الجامعة
    mapping(uint256 => Student[]) public studentsById; // مصفوفة حسب رقم الهوية

    
    function addStudent(
        uint256 _id,
        string memory _name,
        string memory _college,
        string memory _major,
        string memory _gender,
        uint256 _studentNumber,
        uint256 _gpa,
        uint256 _universityId,
        string memory _universityName
    ) public {
        
        require(studentsByUniversity[_universityId].length == 0 || studentsById[_id].length == 0, "ID or University Number already exists");

        
        string memory studentCode = string(abi.encodePacked(uint2str(_universityId), "-", uint2str(_studentNumber)));

       
        Student memory newStudent = Student({
            id: _id,
            name: _name,
            college: _college,
            major: _major,
            gender: _gender,
            studentNumber: _studentNumber,
            gpa: _gpa,
            universityId: _universityId,
            universityName: _universityName,
            code: studentCode
        });

        studentsByUniversity[_universityId].push(newStudent);
        studentsById[_id].push(newStudent);
    }

    
    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {
        if (_i == 0) {
            return "0";
        }
        uint256 j = _i;
        uint256 length;
        while (j != 0) {
            length++;
            j /= 10;
        }
        bytes memory bstr = new bytes(length);
        uint256 k = length;
        j = _i;
        while (j != 0) {
            bstr[--k] = bytes1(uint8(48 + j % 10));
            j /= 10;
        }
        return string(bstr);
    }

    
    function getStudentsByUniversity(uint256 _universityId) public view returns (Student[] memory) {
        return studentsByUniversity[_universityId];
    }

    
    function getStudentsById(uint256 _id) public view returns (Student[] memory) {
        return studentsById[_id];
    }
}
